name: ci

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types:
      - created

jobs:

  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            ghc: 8.10.4
            cabal: 3.4.0.0
            primary: true
            extension: ''
          - os: macos-10.15
            ghc: 8.10.4
            cabal: 3.4.0.0
            primary: false
            extension: ''
          - os: windows-2019
            ghc: 8.10.4
            cabal: 3.4.0.0
            primary: false
            extension: '.exe'
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v2

      - id: setup-haskell
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - run: cabal freeze && cat cabal.project.freeze

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: ${{ matrix.os }}-${{ matrix.ghc }}-

      - run: cabal build

      - run: cabal exec runghc src/util/copy-executable.hs

      - run: strip docker/rattletrap

      - uses: actions/upload-artifact@v2
        with:
          path: docker/rattletrap
          name: rattletrap-executable-${{ github.sha }}-${{ matrix.os }}

      - run: cabal test --test-show-details direct

      - uses: actions/upload-artifact@v2
        with:
          path: output/schema.json
          name: rattletrap-schema-${{ github.sha }}-${{ matrix.os }}.json

      - run: cabal sdist --output-dir docker

      - uses: actions/upload-artifact@v2
        with:
          path: docker/rattletrap-*.tar.gz
          name: rattletrap-package-${{ github.sha }}-${{ matrix.os }}.tar.gz

      - run: cabal check

      - if: github.event_name == 'release' && matrix.primary
        run: cabal upload --publish --username '${{ secrets.HACKAGE_USERNAME }}' --password '${{ secrets.HACKAGE_PASSWORD }}' docker/rattletrap-*.tar.gz

      - if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/octet-stream
          asset_name: rattletrap-${{ github.event.release.tag_name }}-${{ matrix.os }}${{ matrix.extension }}
          asset_path: docker/rattletrap
          upload_url: ${{ github.event.release.upload_url }}

      - if: github.event_name == 'release' && matrix.primary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/json
          asset_name: rattletrap-${{ github.event.release.tag_name }}-schema.json
          asset_path: output/schema.json
          upload_url: ${{ github.event.release.upload_url }}

      - if: github.event_name == 'release' && matrix.primary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: rattletrap-${{ github.event.release.tag_name }}.tar.gz
          asset_path: docker/rattletrap-*.tar.gz
          upload_url: ${{ github.event.release.upload_url }}

      - if: github.event_name == 'release' && matrix.primary
        uses: docker/setup-buildx-action@v1

      - if: github.event_name == 'release' && matrix.primary
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - if: github.event_name == 'release' && matrix.primary
        uses: docker/build-push-action@v2
        with:
          context: docker
          file: docker/Dockerfile
          tags: taylorfausak/rattletrap:version-${{ github.event.release.tag_name }}
          push: true

  brittany:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: echo '::add-matcher::config/brittany-problem-matcher.json'
      - run: git ls-files '*.hs' | xargs docker run --volume "$PWD:$PWD" --workdir "$PWD" itprotv/brittany:64830d767a4eb58aff4e1f1d72fcb489be367893 brittany --check-mode --config-file config/brittany.yaml

  hlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: curl --location --output hlint.tar.gz https://github.com/ndmitchell/hlint/releases/download/v3.2.7/hlint-3.2.7-x86_64-linux.tar.gz
      - run: gzip --decompress hlint.tar.gz
      - run: tar --extract --file hlint.tar
      - run: echo '::add-matcher::config/hlint-problem-matcher.json'
      - run: hlint-3.2.7/hlint --hint config/hlint.yaml src
